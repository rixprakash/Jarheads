# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/148idxaVKkLYRcFASZRyE4S7UI5caXWzP
"""

import numpy as np
import joblib
import torch
import matplotlib.pyplot as plt
import seaborn as sns
from transformers import BertTokenizer, BertModel
from tensorflow.keras.models import load_model
from sklearn.metrics import confusion_matrix

# Ensure GPU is used if available
device = "cuda" if torch.cuda.is_available() else "cpu"

def load_models():
    """Loads trained models and the label encoder."""
    print("Loading trained models...")
    logistic_model = joblib.load("OUTPUT/logistic_regression_bert.pkl")
    nn_model = load_model("OUTPUT/neural_network_bert.h5")
    label_encoder = joblib.load("OUTPUT/label_encoder.pkl")
    print(" Models loaded successfully!")
    return logistic_model, nn_model, label_encoder

def get_bert_embedding(text):
    """Converts input lyrics into a BERT embedding."""
    tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
    bert_model = BertModel.from_pretrained("bert-base-uncased").to(device)

    tokens = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)
    tokens = {key: val.to(device) for key, val in tokens.items()}

    with torch.no_grad():
        output = bert_model(**tokens)

    embedding = output.last_hidden_state[:, 0, :].cpu().numpy()
    return embedding

def plot_confusion_matrix(y_test, y_pred, model_name, label_encoder):
    """Plots a confusion matrix and saves it."""
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(8,6))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title(f"Confusion Matrix - {model_name}")

    filename = f"OUTPUT/confusion_matrix_{model_name.lower().replace(' ', '_')}.png"
    plt.savefig(filename)
    print(f" Confusion matrix saved as {filename}")